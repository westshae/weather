{"version":3,"sources":["components/layout/Container.tsx","components/layout/Content.tsx","components/layout/Input.tsx","components/layout/Navigation.tsx","components/layout/Footer.tsx","components/weather/Current.tsx","components/weather/Forecast.tsx","components/weather/WeatherGrid.tsx","App.tsx","index.tsx"],"names":["Container","styled","div","Content","Form","form","InputButton","input","InputText","Input","props","useState","location","setLocation","getWeather","a","Axios","get","data","console","error","onSubmit","event","preventDefault","then","value","callback","type","onChange","target","Button","button","StyledNavigation","nav","Navigation","cityname","setCityname","countryname","setCountryname","useEffect","undefined","city","onClick","url","newWindow","window","open","opener","openInNewTab","StyledFooter","Paragraph","p","Anchor","Footer","img","minWidth","href","StyledDiv","Image","Header","H1","h1","Table","table","TR","tr","TD","td","Current","temperature","setTemperature","conditiontext","setConditiontext","conditionlink","setConditionlink","windspeed","setWindspeed","humidity","setHumidity","current","astrology","temp","condition","text","icon","src","WeatherCard","date","setDate","mintemperature","setMintemperature","maxtemperature","setMaxtemperature","maxwind","setMaxwind","day","avghumidity","mintemp_c","maxtemp_c","maxwind_kph","Forecast","days","setDays","forecast","forecastday","map","index","WeatherGrid","setCurrent","setForecast","setAstrology","App","setData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAeeA,EAXGC,IAAOC,IAAV,uNCcAC,EAdCF,IAAOC,IAAV,gU,iDCAPE,EAAOH,IAAOI,KAAV,6CAIJC,EAAcL,IAAOM,MAAV,4JASXC,EAAYP,IAAOM,MAAV,+HA6CAE,EApCD,SAACC,GAAc,IAAD,EACMC,mBAAS,IADf,mBACnBC,EADmB,KACTC,EADS,KAgBpBC,EAAU,uCAAG,4BAAAC,EAAA,+EAGKC,IAAMC,IAAI,0CAA4CL,GAH3D,8BAGsEM,KAHtE,OAGfA,EAHe,uDAMfC,QAAQC,MAAR,MANe,iCAQVF,GARU,yDAAH,qDAWhB,OACE,eAACd,EAAD,CAAMiB,SArBa,SAACC,GACpBA,EAAMC,iBAENT,IAAaU,MAAK,SAACC,GACjBf,EAAMgB,SAASD,OAiBjB,UACE,cAACjB,EAAD,CAAWmB,KAAK,OAAOF,MAAOb,EAAUgB,SA1BvB,SAACN,GACpBT,EAAYS,EAAMO,OAAOJ,UA0BvB,cAACnB,EAAD,CAAaqB,KAAK,SAASF,MAAM,eChDjCK,EAAS7B,IAAO8B,OAAV,wJAUNC,EAAmB/B,IAAOgC,IAAV,8lBAsDPC,EAtBK,SAACxB,GAAc,MAECC,mBAAS,IAFV,mBAExBwB,EAFwB,KAEdC,EAFc,OAGOzB,mBAAS,IAHhB,mBAGxB0B,EAHwB,KAGXC,EAHW,KAY/B,OAPAC,qBAAU,gBACWC,GAAd9B,EAAMQ,OACLkB,EAAY1B,EAAMQ,KAAKuB,KAAKN,UAC5BG,EAAe5B,EAAMQ,KAAKuB,KAAKJ,gBAEpC,CAAC3B,IAGA,eAACsB,EAAD,WACI,cAAC,EAAD,CAAON,SAAUhB,EAAMgB,WACV,IAAZS,GACD,eAACL,EAAD,CAAQY,QAAS,kBAvBR,SAACC,GAClB,IAAMC,EAAYC,OAAOC,KAAKH,EAAK,SAAU,uBACzCC,IAAYA,EAAUG,OAAS,MAqBJC,CAAa,mDAAqDb,IAAzF,UAAqGA,EAArG,KAAiHE,S,kBC7DvHY,GAAehD,IAAOC,IAAV,wTAiBZgD,GAAYjD,IAAOkD,EAAV,sHASTC,GAASnD,IAAOc,EAAV,kEAgCGsC,IA3BDpD,IAAOqD,IAAV,wKAYI,WACX,OACI,eAACL,GAAD,WACI,cAACC,GAAD,yDAGA,cAAC,KAAD,CAAYK,SAAU,IAAtB,SACI,cAACH,GAAD,CAAQI,KAAK,2CAA2C3B,OAAO,SAA/D,wCCpDV4B,GAAYxD,IAAOC,IAAV,yUAsBTwD,IATYzD,IAAOkD,EAAV,4JASDlD,IAAOqD,IAAV,mFAMLK,GAAS1D,IAAOC,IAAV,6CAIN0D,GAAK3D,IAAO4D,GAAV,mEAKFC,GAAQ7D,IAAO8D,MAAV,oEAKLC,GAAK/D,IAAOgE,GAAV,oFAOFC,GAAKjE,IAAOkE,GAAV,uEAiEOC,GA3DC,SAAC1D,GAAa,MAEUC,mBAAS,IAFnB,mBAErB0D,EAFqB,KAERC,EAFQ,OAGc3D,mBAAS,IAHvB,mBAGrB4D,EAHqB,KAGNC,EAHM,OAIc7D,mBAAS,IAJvB,mBAIrB8D,EAJqB,KAINC,EAJM,OAKM/D,mBAAS,IALf,mBAKrBgE,EALqB,KAKVC,EALU,OAMIjE,mBAAS,IANb,mBAMrBkE,EANqB,KAMXC,EANW,KAqB5B,OAVAvC,qBAAU,WACY,MAAjB7B,EAAMqE,SAAsC,MAAnBrE,EAAMsE,YAChCV,EAAe5D,EAAMqE,QAAQE,MAC7BT,EAAiB9D,EAAMqE,QAAQG,UAAUC,MACzCT,EAAiBhE,EAAMqE,QAAQG,UAAUE,MACzCR,EAAalE,EAAMqE,QAAQJ,WAC3BG,EAAYpE,EAAMqE,QAAQF,aAE3B,CAACnE,IAGF,8BACoB,IAAjB+D,GACD,eAAC,GAAD,WACE,eAACd,GAAD,WACA,cAACC,GAAD,kCACA,cAAC,GAAD,CAAOyB,IAAKZ,OAIV,eAACX,GAAD,WACE,eAACE,GAAD,WACE,cAACE,GAAD,wBACA,cAACA,GAAD,UAAKK,OAEP,eAACP,GAAD,WACE,cAACE,GAAD,0BACA,eAACA,GAAD,WAAKG,EAAL,WAEF,eAACL,GAAD,WACE,cAACE,GAAD,mBACA,eAACA,GAAD,WAAKS,EAAL,aAEF,eAACX,GAAD,WACE,cAACE,GAAD,uBACA,eAACA,GAAD,WAAKW,EAAL,UAEF,eAACb,GAAD,WACE,cAACE,GAAD,mBACA,cAACA,GAAD,mCCxGRT,GAAYxD,IAAOC,IAAV,2UAcT4D,GAAQ7D,IAAO8D,MAAV,oEAKLC,GAAK/D,IAAOgE,GAAV,oFAOFC,GAAKjE,IAAOkE,GAAV,uEAMFT,GAAQzD,IAAOqD,IAAV,kFAMLK,GAAS1D,IAAOC,IAAV,6CAIN0D,GAAK3D,IAAO4D,GAAV,yEAMFyB,GAAc,SAAC5E,GAAa,MAERC,mBAAS,IAFD,mBAEzB4E,EAFyB,KAEnBC,EAFmB,OAGA7E,mBAAS,IAHT,mBAGzBkE,EAHyB,KAGfC,EAHe,OAIYnE,mBAAS,IAJrB,mBAIzB8E,EAJyB,KAITC,EAJS,OAKY/E,mBAAS,IALrB,mBAKzBgF,EALyB,KAKTC,EALS,OAMUjF,mBAAS,IANnB,mBAMzB4D,EANyB,KAMVC,EANU,OAOU7D,mBAAS,IAPnB,mBAOzB8D,EAPyB,KAOVC,EAPU,OAQF/D,mBAAS,IARP,mBAQzBkF,EARyB,KAQhBC,EARgB,KAqBhC,OAVAvD,qBAAU,WACRiD,EAAQ9E,EAAMQ,KAAKqE,MACnBT,EAAYpE,EAAMQ,KAAK6E,IAAIC,aAC3BN,EAAkBhF,EAAMQ,KAAK6E,IAAIE,WACjCL,EAAkBlF,EAAMQ,KAAK6E,IAAIG,WACjC1B,EAAiB9D,EAAMQ,KAAK6E,IAAIb,UAAUC,MAC1CT,EAAiBhE,EAAMQ,KAAK6E,IAAIb,UAAUE,MAC1CU,EAAWpF,EAAMQ,KAAK6E,IAAII,eACzB,CAACzF,IAGF,eAAC,GAAD,WACE,eAAC,GAAD,WACE,cAAC,GAAD,kCACA,cAAC,GAAD,CAAO2E,IAAKZ,OAGd,eAAC,GAAD,WACE,eAAC,GAAD,WACE,cAAC,GAAD,wBACA,cAAC,GAAD,UAAKF,OAEP,eAAC,GAAD,WACE,cAAC,GAAD,0BACA,eAAC,GAAD,WAAKkB,EAAL,MAAwBE,EAAxB,WAEF,eAAC,GAAD,WACE,cAAC,GAAD,mBACA,eAAC,GAAD,WAAKE,EAAL,aAEF,eAAC,GAAD,WACE,cAAC,GAAD,uBACA,eAAC,GAAD,WAAKhB,EAAL,UAEF,eAAC,GAAD,WACE,cAAC,GAAD,mBACA,cAAC,GAAD,UAAKU,cAuCAa,GAhCE,SAAC1F,GAAc,IAAD,EACLC,mBAAS,IADJ,mBACtB0F,EADsB,KAChBC,EADgB,KAG7B/D,qBAAU,WACa,MAAlB7B,EAAM6F,UACPD,EAAQ5F,EAAM6F,SAASC,eAEzB,CAAC9F,IAEH,IAAM+C,EAAYxD,IAAOC,IAAV,0QAWf,OACE,eAACuD,EAAD,WACE,cAAC,GAAD,CAASsB,QAASrE,EAAMqE,QAASC,UAAWtE,EAAMsE,YAEhDqB,EAAKI,KAAI,SAACV,EAASW,GACjB,OAAO,cAAC,GAAD,CAAyBxF,KAAM6E,GAAbW,UC9H7BjD,GAAYxD,IAAOC,IAAV,0FA2BAyG,GArBK,SAACjG,GAAa,MAEFC,mBAAS,MAFP,mBAEzBoE,EAFyB,KAEhB6B,EAFgB,OAGAjG,mBAAS,MAHT,mBAGzB4F,EAHyB,KAGfM,EAHe,OAIElG,mBAAS,MAJX,mBAIzBqE,EAJyB,KAId8B,EAJc,KAcjC,OARCvE,qBAAU,gBACSC,GAAd9B,EAAMQ,OACP0F,EAAWlG,EAAMQ,KAAK6D,SACtB8B,EAAYnG,EAAMQ,KAAKqF,UACvBO,EAAapG,EAAMQ,KAAK8D,cAEzB,CAACtE,IAGH,cAAC,GAAD,UACG,cAAC,GAAD,CAAU6F,SAAUA,EAAUxB,QAASA,EAASC,UAAWA,OClB3D+B,GAAM,WAAO,IAAD,EACQpG,qBADR,mBACTO,EADS,KACH8F,EADG,KAGhB,OACE,eAAC,EAAD,WACI,sBACA,cAAC,EAAD,CAAY9F,KAAMA,EAAMQ,SAAUsF,IAClC,sBACE,cAAC,EAAD,UACE,cAAC,GAAD,CAAa9F,KAAMA,MAEvB,sBACA,cAAC,GAAD,QChBR+F,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cfdc57ac.chunk.js","sourcesContent":["//Package imports\nimport styled from \"styled-components\";\n\n//Overall container for all components on the page, wraps around navbar, footer and content\nconst Container = styled.div`\n    background-color:#7997c7;\n    /* background-color:#d4ebf2; */\n    min-height:100vh;\n    display:flex;\n    flex-direction:column;\n    overflow:visible;\n    overflow-x:hidden;\n\n`\n\nexport default Container;","//Package imports\nimport styled from \"styled-components\";\n\n//Wraps all content on the page, excluding navbar and footer\nconst Content = styled.div`\n    margin:auto;\n    margin-left:5rem;\n    margin-right:5rem;\n    background-clip:margin-box;\n    background-color:#2E415F;\n    display:flex;\n    flex-direction:column;\n    @media screen and (max-device-width: 480px) and (orientation: portrait){//Phone\n        margin:1rem;\n    }\n\n`\n\nexport default Content;","import {useState} from \"react\";\nimport styled from \"styled-components\";\nimport Axios from \"axios\";\n\nconst Form = styled.form`\n  display:flex;\n`\n\nconst InputButton = styled.input`\n  height:100%;\n  width:fit-content;\n  border:none;\n  padding:0.5rem 1rem 0.5rem 1rem;\n  outline:none;\n  font-size:1.5rem;\n`\n\nconst InputText = styled.input`\n  height:100%;\n  width:100%;\n  border:none;\n  outline:none;\n  padding:0;\n  font-size:1.5rem;\n`\n\nconst Input = (props:any) =>{\n  const [location, setLocation] = useState(\"\");//Stores text of input text box\n  \n  const handleChange = (event:any) => {//When input text box is edited, update location\n    setLocation(event.target.value);  \n  }\n\n  const handleSubmit = (event:any) => {//On submitting, Return getWeather data\n    event.preventDefault();\n    //Get backend data then return via callback\n    getWeather().then((value:any)=>{\n      props.callback(value);\n    })\n  }\n\n  //Gets location weather data from backend\n  const getWeather = async () =>{\n    let data;\n    try{\n      data = await (await Axios.get(\"http://localhost:5000/weather?location=\" + location)).data;//Waits for results, then returns weather in single JSON\n    }\n    catch(error){\n      console.error(error);\n    }\n    return data;\n  }\n\n  return(\n    <Form onSubmit={handleSubmit}>\n      <InputText type=\"text\" value={location} onChange={handleChange} />\n      <InputButton type=\"submit\" value=\"Submit\" />      \n    </Form>\n  );\n}\n\n\nexport default Input;","//Package imports\nimport styled from \"styled-components\";\nimport {useEffect, useState} from \"react\"\n\n//Component imports\nimport Input from \"./Input\";\n\n//CSS for Navigation Buttons\nconst Button = styled.button`\n    background:transparent;\n    color:#F3F5F5;\n    border:none;\n\n    transition:  0.25s ease-out;\n    font-size:2rem;\n`\n\n//CSS for entire navigation bar\nconst StyledNavigation = styled.nav`\n    background-color:#7997c7;\n    display:grid;\n\n\n    @media screen and (max-device-width: 480px) and (orientation: portrait){//Phone\n        grid-template-columns:1fr;\n        margin-left:0%;\n        margin-right:0%;\n    }\n\n    @media screen and (min-device-width: 768px) and (max-device-width: 1024px){//Tablet\n        grid-template-columns:1fr;\n        margin-left:5%;\n        margin-right:5%;\n    }\n\n    @media screen and (min-width: 1024px){//Desktop\n        grid-template-columns:repeat(2, 1fr);\n        margin-left:5%;\n        margin-right:5%;\n    }\n`\n\n//Prevents bad security, thanks stackoverflow\nconst openInNewTab = (url:string) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\n    if (newWindow) {newWindow.opener = null};\n}\n\n\n//Component returned\nconst  Navigation = (props:any) => {   \n    //Stores data from data JSON\n    const [cityname, setCityname] = useState(\"\");\n    const [countryname, setCountryname] = useState(\"\");\n    \n    useEffect(()=>{//If props updates (props.data), update local data from JSON\n        if(props.data != undefined){\n            setCityname(props.data.city.cityname);\n            setCountryname(props.data.city.countryname);\n        }\n    }, [props]);\n    \n    return (\n        <StyledNavigation>\n            <Input callback={props.callback}/>\n            {cityname != \"\" &&//If data recieved, display\n            <Button onClick={() => openInNewTab(\"https://www.google.com/maps/search/?api=1&query=\" + cityname)}>{cityname}, {countryname}</Button>   \n            }\n        </StyledNavigation>\n    )\n}\n\nexport default Navigation;\n","//Package imports\nimport styled from \"styled-components\";\nimport MediaQuery from \"react-responsive\";\n\n//CSS for footer\nconst StyledFooter = styled.div`\n    height:5rem;\n    background-color:#7997c7;\n    display:flex;\n    justify-content:center;\n    align-items:center;\n\n    //Mobile\n    @media only screen\n    and (orientation: portrait)\n    and (max-device-width: 480px){\n        display:grid;\n        height:10rem;\n    }\n`\n\n//CSS for Footer text\nconst Paragraph = styled.p`\n    text-align:center;\n    color:#F3F5F5;\n    font-size:1.25em;\n\n    margin:0.75rem;\n`\n\n//CSS for anchor text\nconst Anchor = styled.a`\n    color:#F3F5F5;\n    height:auto;\n`\n\nconst Image = styled.img`\n    //Desktop\n    @media only screen \n    and (min-device-width: 1025px){\n        :hover{\n            opacity:0.7;\n        }\n    }\n\n`\n\n//Component returned\nconst Footer = () =>{\n    return(\n        <StyledFooter>\n            <Paragraph>Application created by github.com/westshae</Paragraph>\n\n            {/* Desktop */}\n            <MediaQuery minWidth={480}>\n                <Anchor href=\"https://github.com/vecnz/vecnz.github.io\" target=\"_blank\">github.com/westshae</Anchor>\n            </MediaQuery>\n            \n\n        </StyledFooter>\n    )\n}\n\nexport default Footer;","import {useState, useEffect} from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledDiv = styled.div`\n  display:grid;\n  grid-template-rows:2fr 8fr;\n  background-color:#F3F5F5;\n  align-items:center;\n  border:none;\n  box-shadow: 5px 5px 5px #202020;\n  -moz-box-shadow: 5px 5px 5px #202020;\n  -webkit-box-shadow: 5px 5px 5px #202020;\n  -o-box-shadow: 5px 5px 5px #202020;\n  border-radius:0.5rem;\n`\n\nconst Paragraph = styled.p`\n  font-size:1.5em;\n  display:grid;\n  color:#312E3D;\n  justify-content:center;\n  align-items:center;\n  white-space:nowrap;\n`\n\nconst Image = styled.img`\n  display:grid;\n  margin-left:auto;\n  height:100%;\n`\n\nconst Header = styled.div`\n  display:flex;\n`\n\nconst H1 = styled.h1`\n  padding:none;\n  padding-left:1rem;\n`\n\nconst Table = styled.table`\nborder-collapse:collapse;\nheight:90%;\n`\n\nconst TR = styled.tr`\n\n:nth-child(odd){\n    background-color:#d4ebf2;\n  }\n`\n\nconst TD = styled.td`\n  font-size:120%;\n  text-align:center;\n\n`\n\nconst Current = (props:any) =>{\n  //Locally store variables\n  const [temperature, setTemperature] = useState(\"\");\n  const [conditiontext, setConditiontext] = useState(\"\");\n  const [conditionlink, setConditionlink] = useState(\"\");\n  const [windspeed, setWindspeed] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n\n  \n\n\n  useEffect(()=>{//If props update, update local variables\n    if(props.current != null && props.astrology != null){\n      setTemperature(props.current.temp);\n      setConditiontext(props.current.condition.text);\n      setConditionlink(props.current.condition.icon);\n      setWindspeed(props.current.windspeed);\n      setHumidity(props.current.humidity);\n    }\n  }, [props]);\n\n  return(\n    <div>\n      {conditionlink != \"\" &&//If data exists, display it\n      <StyledDiv>\n        <Header>\n        <H1>Weather Information</H1>\n        <Image src={conditionlink}/>\n\n      </Header>\n        {/* <Image src={conditionlink}/> */}\n          <Table>\n            <TR>\n              <TD>Condition</TD>\n              <TD>{conditiontext}</TD>\n            </TR>\n            <TR>\n              <TD>Temperature</TD>\n              <TD>{temperature} C</TD>\n            </TR>\n            <TR>\n              <TD>Wind</TD>\n              <TD>{windspeed}km/h</TD>\n            </TR>\n            <TR>\n              <TD>Humidity</TD>\n              <TD>{humidity}%</TD>\n            </TR>\n            <TR>\n              <TD>Date</TD>\n              <TD>Realtime</TD>\n            </TR>\n          </Table>\n      </StyledDiv>\n      }\n    </div>\n  )\n}\n\nexport default Current;","import {useState, useEffect} from \"react\";\nimport styled from \"styled-components\";\nimport Current from \"./Current\";\n\nconst StyledDiv = styled.div`\n  display:grid;\n  grid-template-rows:2fr 8fr;\n  background-color:#F3F5F5;\n  align-items:center;\n  border:none;\n  border-radius:0.5rem;\n\n  box-shadow: 5px 5px 5px #202020;\n  -moz-box-shadow: 5px 5px 5px #202020;\n  -webkit-box-shadow: 5px 5px 5px #202020;\n  -o-box-shadow: 5px 5px 5px #202020;\n`\n\nconst Table = styled.table`\nborder-collapse:collapse;\nheight:90%;\n`\n\nconst TR = styled.tr`\n\n:nth-child(odd){\n    background-color:#d4ebf2;\n  }\n`\n\nconst TD = styled.td`\n  font-size:120%;\n  text-align:center;\n\n`\n\nconst Image = styled.img`\n  display:grid;\n  margin-left:auto;\n  height:100%;\n`\n\nconst Header = styled.div`\n  display:flex;\n`\n\nconst H1 = styled.h1`\n  padding:none;\n  /* padding-left:1rem; */\n`\n\n\nconst WeatherCard = (props:any) =>{\n  //Stores JSON data locally in component\n  const [date, setDate] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n  const [mintemperature, setMintemperature] = useState(\"\");\n  const [maxtemperature, setMaxtemperature] = useState(\"\");\n  const [conditiontext, setConditiontext] = useState(\"\");\n  const [conditionlink, setConditionlink] = useState(\"\");\n  const [maxwind, setMaxwind] = useState(\"\");\n\n\n  useEffect(()=>{//If props updates, update local variables\n    setDate(props.data.date);\n    setHumidity(props.data.day.avghumidity);\n    setMintemperature(props.data.day.mintemp_c);\n    setMaxtemperature(props.data.day.maxtemp_c);\n    setConditiontext(props.data.day.condition.text);\n    setConditionlink(props.data.day.condition.icon);\n    setMaxwind(props.data.day.maxwind_kph);\n  }, [props]);\n\n  return(\n    <StyledDiv>\n      <Header>\n        <H1>Weather Information</H1>\n        <Image src={conditionlink}/>\n\n      </Header>\n      <Table>\n        <TR>\n          <TD>Condition</TD>\n          <TD>{conditiontext}</TD>\n        </TR>\n        <TR>\n          <TD>Temperature</TD>\n          <TD>{mintemperature} - {maxtemperature} C</TD>\n        </TR>\n        <TR>\n          <TD>Wind</TD>\n          <TD>{maxwind}km/h</TD>\n        </TR>\n        <TR>\n          <TD>Humidity</TD>\n          <TD>{humidity}%</TD>\n        </TR>\n        <TR>\n          <TD>Date</TD>\n          <TD>{date}</TD>\n        </TR>\n      </Table>\n    </StyledDiv>\n  )\n}\n\nconst Forecast = (props:any) =>{\n  const [days, setDays] = useState([]);//Stores all forecast days\n\n  useEffect(()=>{//If props data updates, update local variables\n    if(props.forecast != null){\n      setDays(props.forecast.forecastday);\n    }\n  },[props]);\n\n  const StyledDiv = styled.div`\n    display:grid;\n    grid-template-columns:1fr;\n    grid-column-gap:3rem;\n    grid-row-gap:3rem;\n    background-color:#7997c7;\n    @media screen and (min-width: 1024px){//Desktop\n    grid-template-columns:repeat(4, 1fr);\n    }\n  `\n\n  return(\n    <StyledDiv>\n      <Current current={props.current} astrology={props.astrology}/>\n      {//For each day of data, display\n        days.map((day:any, index:number)=>{\n          return(<WeatherCard key={index} data={day}/>)\n        })\n      }\n    </StyledDiv>\n  )\n}\n\nexport default Forecast;","import styled from \"styled-components\";\nimport {useState, useEffect} from \"react\";\n\nimport Forecast from \"../weather/Forecast\";\n\nconst StyledDiv = styled.div`\n  display:grid;\n  grid-template-columns:1fr;\n  gap:0.5rem;\n`\n\nconst WeatherGrid = (props:any) =>{\n  //Stores all data received from weather JSON\n  const [current, setCurrent] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [astrology, setAstrology] = useState(null);\n\n  useEffect(()=>{//If props updates, update local variables\n    if(props.data != undefined){\n      setCurrent(props.data.current);\n      setForecast(props.data.forecast);\n      setAstrology(props.data.astrology);\n    }\n  }, [props]);\n\n return(\n   <StyledDiv>\n      <Forecast forecast={forecast} current={current} astrology={astrology}/>\n   </StyledDiv>\n )\n}\n\nexport default WeatherGrid;","import {useState} from 'react';\n\n//Component imports\nimport Container from './components/layout/Container';\nimport Content from './components/layout/Content';\nimport Navigation from './components/layout/Navigation';\nimport Footer from './components/layout/Footer';\nimport WeatherGrid from \"./components/weather/WeatherGrid\";\n\nconst App = () => {\n  const [data, setData] = useState();//Stores weather JSON data\n\n  return (\n    <Container>\n        <p/>\n        <Navigation data={data} callback={setData}/>\n        <p/>\n          <Content>\n            <WeatherGrid data={data}/>\n          </Content>\n        <p/>\n        <Footer/>\n    </Container>\n  );\n}\n\nexport {App};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}